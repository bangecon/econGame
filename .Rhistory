results,
partnerResults,
all = TRUE,
by.x = c("First.Name.1", "Last.Name.1", "Round"),
by.y = c("First.Name.2", "Last.Name.2", "Round")
)
}
results$Price.M <-
apply(results[, which(names(results) %in% c("Price.1", "Price.2"))], 1, min)
results$Q.M <- (a - results$Price.M) / (-b)
results$Q.1 <- ifelse(
results$Price.1 > results$Price.M,
0,
ifelse(
results$Price.1 == results$Price.2,
results$Q.M / 2,
results$Q.M
)
)
Price.C <- (a + c)/2
Q.C <- (a - c)/(-2*b)
Profit.C <- (a - c)^2/(-4*b)
results$Profit <- results$Q.1 * (results$Price.M - c) - f
grades <-
aggregate(Profit ~ First.Name.1 + Last.Name.1,
data = results,
FUN = sum)
colnames(grades) <- c("First Name", "Last Name", "Score")
payoffMatrix <- matrix(c(
paste0("(", 0, ", ", 0, ")"),
paste0("(", 0, ", ", round((Price.C - 0.01 - c)*(a + b*(Price.C - 0.01)) - f, 4), ")"),
paste0("(", round((Price.C - 0.01 - c)*(a + b*(Price.C - 0.01)) - f, 4), ", ", 0, ")"),
paste0("(", round(Profit.C/2, 2), ", ", round(Profit.C/2, 2), ")")),
nrow = 2, ncol = 2)
colnames(payoffMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(payoffMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
outputMatrix <- matrix(c(
paste0("(", (a + b*c)/2, ", ", (a + b*c)/2, ")"),
paste0("(", 0, ", ", a + b*(Price.C - 0.01), ")"),
paste0("(", a + b*(Price.C - 0.01), ", ", 0, ")"),
paste0("(", Q.C, ", ", Q.C, ")")),
nrow = 2, ncol = 2)
colnames(outputMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(outputMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
priceMatrix <- matrix(c(c, Price.C - 0.01, Price.C - 0.01, Price.C),
nrow = 2, ncol = 2)
colnames(priceMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(priceMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
out <- list(type = "bertrandGame",
payoff = payoffMatrix,
output = outputMatrix,
price = priceMatrix,
results = results[order(results$Last.Name.1,
results$First.Name.1),],
grades = grades[order(grades$`Last Name`, grades$`First Name`), ])
class(out) <- c("econGame", class(out))
out
}
runBertrandGameApp()
bertrandGame('1HqtcMfpmS7i9dNRg1RCa4yyXYXsEmB6rMtfJQmthQP4')
bertrandGame('1-ZSvkyFzORclGT4uZ8iJ13DItrCAvEpUAMgZFVQDSfI')
runBertrandGameApp()
bertrandGame('1-GbZ_NyPLZWiYDKIUEHlijBrx6Rn0fnYs0_33KwNPWk', partners = 'random')
runBertrandGameApp()
cournotGame('1wroVhjCcsSuJ-JssxQ_c2wbfzVe9ijIX5a4NXmy_BLw')
cournotGame('1QfLYymZfljuKP8oCYsjVV4bRRV2dbcv8afp8hbHIde8')
cournotGame('1QfLYymZfljuKP8oCYsjVV4bRRV2dbcv8afp8hbHIde8')
runCournotGameApp()
runEntryGameApp()
pak::pkg_install('bangecon/econGame')
library(econGame)
runEntryGameApp()
detach("package:econGame", unload = TRUE)
pak::pkg_install('bangecon/econGame')
library(econGame)
runEquilibriumGameApp()
detach("package:econGame", unload = TRUE)
pak::pkg_install('bangecon/econGame')
econGame::runLobbyGameApp()
library(econGame)
runLobbyGameApp()
detach("package:econGame", unload = TRUE)
pak::pkg_install('bangecon/econGame')
pak::pkg_install('bangecon/econGame')
pak::pkg_install('bangecon/econGame')
library(econGame)
runLobbyGameApp()
detach("package:econGame", unload = TRUE)
pak::pkg_install('bangecon/econGame')
library(econGame)
runBertrandGameApp()
library(econGame)
bertrandGame('1-ZSvkyFzORclGT4uZ8iJ13DItrCAvEpUAMgZFVQDSfI')
source("G:/My Drive/Teaching/econGame/R/bertrandGame.R", echo=TRUE)
bertrandGame('1-ZSvkyFzORclGT4uZ8iJ13DItrCAvEpUAMgZFVQDSfI')
source("G:/My Drive/Teaching/econGame/R/bertrandGame.R", echo=TRUE)
bertrandGame('1-ZSvkyFzORclGT4uZ8iJ13DItrCAvEpUAMgZFVQDSfI')
rm(bertrandGame)
detach("package:econGame", unload = TRUE)
.libPaths()
pak::pkg_install('bangecon/econGame')
pak::pkg_install('bangecon/econGame')
econGame::library(econGame)
library(econGame)
bertrandGame('1-ZSvkyFzORclGT4uZ8iJ13DItrCAvEpUAMgZFVQDSfI')
runBertrandGameApp()
E_h1 = 10
E_h2 = 0
E_f1 = 0
E_f2 = 10
alpha = 0.6
beta = 0.6
E_h = c(as.numeric(input$E_h1), as.numeric(input$E_h2))
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- Edgeworth(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
E_h = c(as.numeric(input$E_h1), as.numeric(input$E_h2))
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- Edgeworth(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- EdgeworthBox(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
setwd("G:/My Drive/Teaching/IntermediateMicro/EdgeworthBox")
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- EdgeworthBox(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
source('EdgeworthBox.r')
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- Edgeworth(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
library(ggplot2)
E_h = c(as.numeric(E_h1), as.numeric(E_h2))
E_f = c(as.numeric(E_f1), as.numeric(E_f2))
box <- Edgeworth(E_h = E_h, E_f = E_f, alpha = alpha, beta = beta)
solution1 <- rbind(E_h, box$Home.Consumption,
E_f, box$Foreign.Consumption,
box$Terms.of.Trade)
colnames(solution1) <- c('Good 1', 'Good 2')
rownames(solution1) <- c('Home Endowment', 'Home Consumption',
'Foreign Endowment', 'Foreign Consumption',
'Terms of Trade (Prices)')
solution1
library(econGame)
?anchoringGame
multipdGame('1lFbrYakyoVStVM4NHMkmwWaNrNoPqLvyvqCtZwevCMI')
runMultipdGameGameApp()
source("G:/My Drive/Teaching/econGame/R/multipdGame.R", echo=TRUE)
multipdGame('1lFbrYakyoVStVM4NHMkmwWaNrNoPqLvyvqCtZwevCMI')
runMultipdGameGameApp()
library(econGame)
runMultipdGameGameApp()
pollutionGame('1Lw_rrXQE7X5qc0x3a1AmiKZB9dF44OI49_v6xzWbQRs')
pollutionGame('1Lw_rrXQE7X5qc0x3a1AmiKZB9dF44OI49_v6xzWbQRs')
runPollutionGameApp()
runPublicgoodGameApp()
stackelbergGame('1DO0yRdrZMJuCrYRa9d9dR-sFSeKQ84aNIQRE_cQr1d4', partners = "students")
runStackelbergGameApp()
stackelbergGame('1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ', partners = "random")
stackelbergGame(
resultsSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
leaderSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
partners = "random")
source("G:/My Drive/Teaching/econGame/R/randomLeaders.R", echo=TRUE)
stackelbergGame(
resultsSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
leaderSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
partners = "random")
detach(econGame, unload = T)
detach("package:econGame", unload = TRUE)
stackelbergGame(
resultsSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
leaderSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
partners = "random")
source("G:/My Drive/Teaching/econGame/R/stackelbergGame.R", echo=TRUE)
stackelbergGame(
resultsSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
leaderSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
partners = "random")
source("G:/My Drive/Teaching/econGame/R/gameTree.R", echo=TRUE)
stackelbergGame(
resultsSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
leaderSheet = '1HyuuITGkuuZgCgJTiF8XJ3HVNjzKYvPn82W34dnfJnQ',
partners = "random")
library(econGame)
runStaghuntGameApp()
runUltimatumGameApp
runUltimatumGameApp()
runUltimatumGameApp()
tinytex::install_tinytex()
library(metricsToTheFace)
runTutorial(2,2)
library(WDI)
library(lubridate)
library(comtradr)
install.packages("comtradr")
DomesticIndicators <-
WDI(
country = "JM",
indicator = c(
"NY.GDP.PCAP.KD.ZG",
"FP.CPI.TOTL.ZG",
"SL.TLF.TOTL.IN",
"SL.UEM.TOTL.NE.ZS"
),
start = 1980,
end = 2019
)
View(DomesticIndicators)
plot(DomesticIndicators$year, DomesticIndicators$FP.CPI.TOTL.ZG,
type = 'l', lty = 1, col = 'darkgreen',
ylim = c(-5,40),
xlab = "Year", ylab = "Percent Change")
plot(DomesticIndicators$year, DomesticIndicators$FP.CPI.TOTL.ZG,
type = 'l', lty = 1, col = 'darkgreen',
ylim = c(-5,40)
)
plot(DomesticIndicators$year, DomesticIndicators$FP.CPI.TOTL.ZG,
type = 'l', lty = 1, col = 'darkgreen',
ylim = c(-5,40),
xlab = "Year", ylab = "Percent Change")
lines(DomesticIndicators$year, DomesticIndicators$SL.UEM.TOTL.NE.ZS, col = 'blue')
lines(DomesticIndicators$year, DomesticIndicators$NY.GDP.PCAP.KD.ZG, col = 'black')
legend("topright",
legend = c("Domestic Indicator #1", "Domestic Indicator #2", "Domestic Indicator #3"),
col=c("black", "darkgreen", "blue"),
lty = 1)
InternationalIndicators <- WDI(country = "JM", indicator = c("NE.TRD.GNFS.ZS", "BX.KLT.DINV.WD.GD.ZS", "BX.TRF.PWKR.DT.GD.ZS", "SM.POP.NETM", "TT.PRI.MRCH.XD.WD", "TM.VAL.MRCH.XD.WD", "TX.VAL.MRCH.XD.WD"), start = 1980, end = 2019)
View(InternationalIndicators)
InternationalIndicators$TradeIndex <- 100*InternationalIndicators$NE.TRD.GNFS.ZS/
InternationalIndicators$NE.TRD.GNFS.ZS[26]
InternationalIndicators$RemitIndex <- 100*InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS/
InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS[26]
InternationalIndicators$FDIIndex <- 100*InternationalIndicators$BX.KLT.DINV.WD.GD.ZS/
InternationalIndicators$BX.KLT.DINV.WD.GD.ZS[26]
InternationalIndicators$TOTIndex <- 100*InternationalIndicators$TT.PRI.MRCH.XD.WD/
InternationalIndicators$TT.PRI.MRCH.XD.WD[26]
InternationalIndicators$ImportPrices <- 100*InternationalIndicators$TM.VAL.MRCH.XD.WD/
InternationalIndicators$TM.VAL.MRCH.XD.WD[26]
InternationalIndicators$ExportPrices <- 100*InternationalIndicators$TX.VAL.MRCH.XD.WD/
InternationalIndicators$TX.VAL.MRCH.XD.WD[26]
plot(InternationalIndicators$year, InternationalIndicators$TradeIndex,
type = 'l', lty = 1, col = 'black',
ylim = c(30, 170),
xlab = "Year", ylab = "% of GDP")
lines(InternationalIndicators$year, InternationalIndicators$RemitIndex, col = 'blue')
lines(InternationalIndicators$year, InternationalIndicators$FDIIndex, col = 'darkgreen')
lines(InternationalIndicators$year, InternationalIndicators$ImportPrices, col = 'red')
lines(InternationalIndicators$year, InternationalIndicators$ExportPrices, col = 'brown')
legend("topleft",
legend = c("Indicator #1", "Indicator #2", "Indicator #3", "Indicator #4", "Indicator #5"),
col=c("black", "blue", "darkgreen", "red", "brown"),
lty = 1)
pak::pkg_install('ropensci/comtradr')
library(comtradr)
example1 <- comtradr::ct_get_data(
reporter = 'CHN',
partner = c('ARG', 'DEU'),
start_date = 2010,
end_date = 2012
)
?set_primary_comtrade_key
View(country_codes)
pak::pkg_install('amattioc/SDMX')
pak::pkg_install('amattioc/SDMX/RJSDMX')
devtools::install_github(repo = "amattioc/SDMX", subdir = "RJSDMX")
library(rJava)
library(rJava)
detach("package:rJava", unload = TRUE)
library(rJava)
library(rJava)
library(rJava)
devtools::install_github(repo = "amattioc/SDMX", subdir = "RJSDMX")
library(RJSDMX)
getProviders()
getFlows('WITS')
getFlows('ECB')
getFlows('WITS', '*Trade*')
?getFlows
getFlows('WITS', '*Export*')
getFlows('ECB', 'EXR')
getFlows('WITS')
getFlows('WBG_WITS')
getFlows('WITS')
getFlows('WITS', 'Trade')
getFlows('WITS', 'TradeStats_Trade')
getFlows('WITS', '*TradeStats_Trade*')
getDimensions('WITS', 'DF_WITS_TradeStats_Trade')
data <- getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade')
getDimensions('ECB', 'EXR')
getDimensions('WITS', 'DF_WITS_TradeStats_Trade')
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/A.USA....')
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/A.USA..')
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/A..')
getDimensions('WITS', 'DF_WITS_TradeStats_Trade$FREQ')
getDimensions('WITS', 'DF_WITS_TradeStats_Trade')$FREQ
unlist(getDimensions('WITS', 'DF_WITS_TradeStats_Trade'))$FREQ
unlist(getDimensions('WITS', 'DF_WITS_TradeStats_Trade'))
unlist(getDimensions('WITS', 'DF_WITS_TradeStats_Trade'))[1]
getCodes('WITS', 'DF_WITS_TradeStats_Trade', 'FREQ')
getCodes('WITS', 'DF_WITS_TradeStats_Trade', 'PARTNER')
getDimensions('WITS', 'DF_WITS_TradeStats_Trade')
ViewgetCodes('WITS', 'DF_WITS_TradeStats_Trade', 'PRODUCTCODE')
View(getCodes('WITS', 'DF_WITS_TradeStats_Trade', 'PRODUCTCODE'))
View(getCodes('WITS', 'DF_WITS_TradeStats_Trade', 'INDICATOR'))
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/A.USA..Total.MPRT-PRTNR-SHR') -> DATATEST
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/A.USA.CAN.Total.MPRT-PRTNR-SHR') -> DATATEST
emoney_trx_id <- as_tibble(sdmxdf(getTimeSeries(org,"DS-FAS.A.ID.FCMTVG_GDP_PT")))
emoney_trx_id <- getTimeSeries(org,"DS-FAS.A.ID.FCMTVG_GDP_PT")
emoney_trx_id <- getTimeSeries("IMF2","DS-FAS.A.ID.FCMTVG_GDP_PT")
View(emoney_trx_id)
emoney_trx_id <- getTimeSeriesTable("IMF2","DS-FAS.A.ID.FCMTVG_GDP_PT")
getCodes('IMF')
getFlows('IMF2')
getFlows('WITS')
TradeStatsTrade <- getTimeSeriesTable("WITS","DF_WITS_TradeStats_Trade")
getTimeSeries('WITS', 'DF_WITS_TradeStats_Trade/DS-FAS.A.ID.FCMTVG_GDP_PT.A.USA.CAN.Total.MPRT-PRTNR-SHR') -> DATATEST
getTimeSeries('WITS', 'DS-FAS.A.ID.FCMTVG_GDP_PT.A.USA.CAN.Total.MPRT-PRTNR-SHR') -> DATATEST
getDimensions('IMF2', 'DS-FAS')
getCodes('IMF2', 'DS-FAS')
getCodes('IMF2', 'DS-FAS', 'REF_AREA')
View(getCodes('IMF2', 'DS-FAS', 'REF_AREA'))
getDimensions('IMF2', 'DS-FAS'))
getDimensions('IMF2', 'DS-FAS')
View(getCodes('IMF2', 'DS-FAS', 'INDICATOR'))
getDimensions('WITS', 'DF_WITS_TradeStats_Trade')
dataTest <- getTimeSeriesTable('WITS', 'DF_WITS_Tariff_TRAINS.A.USA.MEX.820830.AVEEstimated')
dataTest <- getTimeSeries('WITS', 'DF_WITS_Tariff_TRAINS.A.USA.MEX.820830.AVEEstimated')
source("C:/Users/jb0616165/My Drive/Teaching/International/DataStuff/Demo.R", echo=TRUE)
dataTest <- getTimeSeriesTable('WITS', 'DF_WITS_Tariff_TRAINS.A.840.826.820830.AVEEstimated')
library(econGame)
View(econGame::entryGame)
View(econGame::equilibriumGame())
View(econGame::equilibriumGame)
View(econGame::runEquilibriumGameApp)
DomesticIndicators <-
WDI(
country = "JM",
indicator = c(
"NY.GDP.PCAP.KD.ZG",
"FP.CPI.TOTL.ZG",
"SL.TLF.TOTL.IN",
"SL.UEM.TOTL.NE.ZS"
),
start = 1980,
end = 2019
)
library(WDI)
library(lubridate)
library(comtradr)
DomesticIndicators <-
WDI(
country = "JM",
indicator = c(
"NY.GDP.PCAP.KD.ZG",
"FP.CPI.TOTL.ZG",
"SL.TLF.TOTL.IN",
"SL.UEM.TOTL.NE.ZS"
),
start = 1980,
end = 2019
)
InternationalIndicators <- WDI(country = "JM", indicator = c("NE.TRD.GNFS.ZS", "BX.KLT.DINV.WD.GD.ZS", "BX.TRF.PWKR.DT.GD.ZS", "SM.POP.NETM", "TT.PRI.MRCH.XD.WD", "TM.VAL.MRCH.XD.WD", "TX.VAL.MRCH.XD.WD"), start = 1980, end = 2019)
InternationalIndicators$TradeIndex <- 100*InternationalIndicators$NE.TRD.GNFS.ZS/
InternationalIndicators$NE.TRD.GNFS.ZS[26]
InternationalIndicators$RemitIndex <- 100*InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS/
InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS[26]
InternationalIndicators$FDIIndex <- 100*InternationalIndicators$BX.KLT.DINV.WD.GD.ZS/
InternationalIndicators$BX.KLT.DINV.WD.GD.ZS[26]
InternationalIndicators$TOTIndex <- 100*InternationalIndicators$TT.PRI.MRCH.XD.WD/
InternationalIndicators$TT.PRI.MRCH.XD.WD[26]
InternationalIndicators$ImportPrices <- 100*InternationalIndicators$TM.VAL.MRCH.XD.WD/
InternationalIndicators$TM.VAL.MRCH.XD.WD[26]
InternationalIndicators$ExportPrices <- 100*InternationalIndicators$TX.VAL.MRCH.XD.WD/
InternationalIndicators$TX.VAL.MRCH.XD.WD[26]
plot(InternationalIndicators$year, InternationalIndicators$TradeIndex,
type = 'l', lty = 1, col = 'black',
ylim = c(30, 170),
xlab = "Year", ylab = "% of GDP")
lines(InternationalIndicators$year, InternationalIndicators$RemitIndex, col = 'blue')
lines(InternationalIndicators$year, InternationalIndicators$FDIIndex, col = 'darkgreen')
lines(InternationalIndicators$year, InternationalIndicators$ImportPrices, col = 'red')
lines(InternationalIndicators$year, InternationalIndicators$ExportPrices, col = 'brown')
legend("topleft",
legend = c("Indicator #1", "Indicator #2", "Indicator #3", "Indicator #4", "Indicator #5"),
col=c("black", "blue", "darkgreen", "red", "brown"),
lty = 1)
plot(InternationalIndicators$year, InternationalIndicators$NE.TRD.GNFS.ZS,
type = 'l', lty = 1, col = 'black',
ylim = c(30, 170),
xlab = "Year", ylab = "% of GDP")
lines(InternationalIndicators$year, InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS, col = 'blue')
lines(InternationalIndicators$year, InternationalIndicators$BX.KLT.DINV.WD.GD.ZS, col = 'darkgreen')
lines(InternationalIndicators$year, InternationalIndicators$TM.VAL.MRCH.XD.WD, col = 'red')
lines(InternationalIndicators$year, InternationalIndicators$TX.VAL.MRCH.XD.WD, col = 'brown')
legend("topleft",
legend = c("Indicator #1", "Indicator #2", "Indicator #3", "Indicator #4", "Indicator #5"),
col=c("black", "blue", "darkgreen", "red", "brown"),
lty = 1)
plot(InternationalIndicators$year, InternationalIndicators$NE.TRD.GNFS.ZS,
type = 'l', lty = 1, col = 'black',
ylim = c(30, 170),
xlab = "Year", ylab = "% of GDP")
lines(InternationalIndicators$year, InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS, col = 'blue')
lines(InternationalIndicators$year, InternationalIndicators$BX.KLT.DINV.WD.GD.ZS, col = 'darkgreen')
lines(InternationalIndicators$year, InternationalIndicators$TM.VAL.MRCH.XD.WD, col = 'red')
lines(InternationalIndicators$year, InternationalIndicators$TX.VAL.MRCH.XD.WD, col = 'brown')
legend("topleft",
legend = c("Indicator #1", "Indicator #2", "Indicator #3", "Indicator #4", "Indicator #5"),
col=c("black", "blue", "darkgreen", "red", "brown"),
lty = 1)
plot(InternationalIndicators$year, InternationalIndicators$NE.TRD.GNFS.ZS,
type = 'l', lty = 1, col = 'black',
# ylim = c(30, 170),
xlab = "Year", ylab = "% of GDP")
lines(InternationalIndicators$year, InternationalIndicators$BX.TRF.PWKR.DT.GD.ZS, col = 'blue')
lines(InternationalIndicators$year, InternationalIndicators$BX.KLT.DINV.WD.GD.ZS, col = 'darkgreen')
lines(InternationalIndicators$year, InternationalIndicators$TM.VAL.MRCH.XD.WD, col = 'red')
lines(InternationalIndicators$year, InternationalIndicators$TX.VAL.MRCH.XD.WD, col = 'brown')
legend("topleft",
legend = c("Indicator #1", "Indicator #2", "Indicator #3", "Indicator #4", "Indicator #5"),
col=c("black", "blue", "darkgreen", "red", "brown"),
lty = 1)
library(metricsToTheFace)
runTutorial(3,1)
runTutorial(3,1)
wage1 <- wooldridge::wage1
wage.lm1 <- lm(wage ~ educ, data = wage1)
wage.lm2 <- lm(wage ~ educ + exper, data = wage1)
wage.p <- lm(wage~exper, data = wage1)
educ.p <- lm(educ~exper, data = wage1)
wage.lmr <- lm(wage.p$resid~educ.p$residuals)
stargazer(wage.lmr, wage.lm2, type = 'text')
library(stargazer)
wage.lmr <- lm(wage.p$resid~educ.p$residuals)
stargazer(wage.lmr, wage.lm2, type = 'text')
e401k <- wooldridge::k401k
library(learnr)
library(gradethis)
library(ggcheck)
gradethis::gradethis_setup()
tutorial_options(exercise.reveal_solution = FALSE)
knitr::opts_chunk$set(echo = FALSE)
library(stargazer)
k401k <- wooldridge::k401k
prate.lm0 <- lm(prate ~ mrate, data = k401k)
prate.u <- lm(prate ~ age, data = k401k)$residuals
mrate.u <- residuals(lm(mrate ~ age, data = k401k))
prate.lm1 <- lm(prate.u ~ mrate.u)
prate.lm2 <- lm(prate ~ mrate + age, data = k401k)
stargazer(prate.lm0, prate.lm1, prate.lm2, type = 'text')
shiny::runApp('C:/Users/jb0616165/My Drive/Teaching/PrinciplesOfMicro(Fall2023)/Solution202ProjectApp')
install.packages('fakeR')
pak::pkg_install('lhz1029/fakeR')
runApp('C:/Users/jb0616165/My Drive/Teaching/PrinciplesOfMicro(Fall2023)/Solution202ProjectApp')
runApp('C:/Users/jb0616165/My Drive/Teaching/PrinciplesOfMicro(Fall2023)/Solution202ProjectApp')
library(econGame)
plot.econGame
plot.econGame()
plot_econGame()
View(plot())
View(plot
)
View(econGame::runEquilibriumGameApp)
View(econGame::plot_econGame)
plot(equilibriumGame('1RHp9_aQNgVFTc1UHAVwKbPyL3xBUEUq9GM0MKKIwziw'))
View(equilibriumGame)
View(entryGame)
View(equilibriumGame)
View(runEquilibriumGameApp())
View(runEquilibriumGameApp)
runEquilibriumGameApp()
bookdown:::mathquill()
bookdown:::serve_book()
devtools:::document()
devtools:::document()
?publicgoodGame
runBertrandGameApp()
runCournotGameApp()
library(econGame)
runCournotGameApp()
View(econGame::runCournotGameApp)
runCournotGameApp()
View(econGame::cournotGame)
runBertrandGameApp()
View(econGame::cournotGame)
runCournotGameApp()
runCournotGameApp()
runCournotGameApp()
library(econGame)
?randomLeaders
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg/edit#gid=0')
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg')
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg/edit?usp=sharing')
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg/edit?usp=sharing')
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg/edit?usp=sharing')$wide
randomLeaders('https://docs.google.com/spreadsheets/d/1OL3oFPTYH8tpDOAk9vuzT3gxOMDFReuQBNqU7AvAoCg/edit?usp=sharing')$long
library(metricsToTheFace)
runTutorial(3,3)
runTutorial(3,3, T)
library(econGame)
bertrandGame('1udBYOZEPSwDOwNx0oaEvjSNGBhDSGkznO2_ozitOHkA')
cournotGame('1TxXydDWx7xoOduRmAa4_xWAD2WRq_3WEvfpZkiyZtAU')
library(econGame)
runEquilibriumGameApp()
runEquilibriumGameApp()
