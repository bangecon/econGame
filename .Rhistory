head(partnerResults)
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[3] <- "Strategy.2"
results[Round == 1, ]
subset(results, Round == 1)
subset(partnerResults, Round == 1)
partnerResults
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[3:4] <- c("Round.2", "Strategy.2")
partnerResults
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name.1", "Last.Name.1"),
by.y = c("First.Name.2", "Last.Name.2")
)
results
results <- as.data.frame(googlesheets4::read_sheet(sheet))[-1]
colnames(results) <-
c(
'First.Name.1',
'Last.Name.1',
'First.Name.2',
'Last.Name.2',
'Round',
'Strategy.1'
)
results <-
tidyr::replace_na(results, list(First.Name.1 = "John", Last.Name.1 = "Doe",
First.Name.2 = "Jane", Last.Name.2 = "Doe"))
results$First.Name.1 <-
stringr::str_to_title(results$First.Name.1)
results$Last.Name.1 <-
stringr::str_to_title(results$Last.Name.1)
results$First.Name.2 <-
stringr::str_to_title(results$First.Name.2)
results$Last.Name.2 <-
stringr::str_to_title(results$Last.Name.2)
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[3:4] <- c("Round.2", "Strategy.2")
results
results <- as.data.frame(googlesheets4::read_sheet(sheet))[-1]
colnames(results) <-
c(
'First.Name.1',
'Last.Name.1',
'First.Name.2',
'Last.Name.2',
'Round.1',
'Strategy.1'
)
results <-
tidyr::replace_na(results, list(First.Name.1 = "John", Last.Name.1 = "Doe",
First.Name.2 = "Jane", Last.Name.2 = "Doe"))
results$First.Name.1 <-
stringr::str_to_title(results$First.Name.1)
results$Last.Name.1 <-
stringr::str_to_title(results$Last.Name.1)
results$First.Name.2 <-
stringr::str_to_title(results$First.Name.2)
results$Last.Name.2 <-
stringr::str_to_title(results$Last.Name.2)
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round', 'Strategy.1'))]
colnames(partnerResults)[3:4] <- c("Round.2", "Strategy.2")
colnames(partnerResults)
results <- as.data.frame(googlesheets4::read_sheet(sheet))[-1]
colnames(results) <-
c(
'First.Name.1',
'Last.Name.1',
'First.Name.2',
'Last.Name.2',
'Round.1',
'Strategy.1'
)
results <-
tidyr::replace_na(results, list(First.Name.1 = "John", Last.Name.1 = "Doe",
First.Name.2 = "Jane", Last.Name.2 = "Doe"))
results$First.Name.1 <-
stringr::str_to_title(results$First.Name.1)
results$Last.Name.1 <-
stringr::str_to_title(results$Last.Name.1)
results$First.Name.2 <-
stringr::str_to_title(results$First.Name.2)
results$Last.Name.2 <-
stringr::str_to_title(results$Last.Name.2)
partnerResults <-
results[, which(names(results) %in% c('First.Name.2', 'Last.Name.2', 'Round.1', 'Strategy.1'))]
colnames(partnerResults)[3:4] <- c("Round.2", "Strategy.2")
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name.1", "Last.Name.1", "Round.1"),
by.y = c("First.Name.2", "Last.Name.2", "Round.2")
)
results
Q.M = (a - c)/(-2*b)
Q.C = Q.M/2
Q.D = (a - c)/(-3*b)
Q.C.off = Q.M/2
Q.D.off = (a - c + b*Q.C.off)/(-2*b)
price <- function(x) a + b*(x[1] + x[2])
results <- within(results, {
Q.Student <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", Q.C, Q.D.off),
ifelse(Strategy.1 == "Collude", Q.C.off, Q.D)
)
Q.Partner <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", Q.C, Q.C.off),
ifelse(Strategy.1 == "Collude", Q.D.off, Q.D)
)
Price <- ifelse(
Strategy.2 == "Collude",
ifelse(Strategy.1 == "Collude", price(c(Q.C, Q.C)), price(c(Q.D.off, Q.C.off))),
ifelse(Strategy.1 == "Collude", price(c(Q.D.off, Q.C.off)), price(c(Q.D, Q.D)))
)
})
results$Profit <- results$Q.Student*(results$Price - c) - f
payoffMatrix <- matrix(c(
paste0("(", round(Q.D*(price(c(Q.D, Q.D)) - c) - f, 4), ", ",
round(Q.D*(price(c(Q.D, Q.D)) - c) - f, 4), ")"),
paste0("(", round(Q.C.off*(price(c(Q.C.off, Q.D.off)) - c) - f, 4), ", ",
round(Q.D.off*(price(c(Q.C.off, Q.D.off)) - c) - f, 4), ")"),
paste0("(", round(Q.C.off*(price(c(Q.C.off, Q.D.off)) - c) - f, 4), ", ",
round(Q.D.off*(price(c(Q.C.off, Q.D.off)) - c) - f, 4), ")"),
paste0("(", round(Q.C*(price(c(Q.C, Q.C)) - c) - f, 4), ", ",
round(Q.C*(price(c(Q.C, Q.C)) - c) - f, 4), ")")),
nrow = 2, ncol = 2)
colnames(payoffMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(payoffMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
outputMatrix <- matrix(c(
paste0("(", round(Q.D, 4), ", ", round(Q.D, 4), ")"),
paste0("(", round(Q.C.off, 4), ", ", round(Q.D.off, 4), ")"),
paste0("(", round(Q.D.off, 4), ", ", round(Q.C.off, 4), ")"),
paste0("(", Q.C, ", ", Q.C, ")")),
nrow = 2, ncol = 2)
colnames(outputMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(outputMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
priceMatrix <- matrix(c(
round(price(c(Q.D, Q.D)), 4),
round(price(c(Q.C.off, Q.D.off)), 4),
round(price(c(Q.C.off, Q.D.off)), 4),
round(price(c(Q.C, Q.C)), 4)),
nrow = 2, ncol = 2)
colnames(priceMatrix) <-
c("Partner = Defect", "Partner = Collude")
rownames(priceMatrix) <-
c("Strategy = Defect", "Strategy = Collude")
grades <-
aggregate(Profit ~ First.Name.1 + Last.Name.1,
data = results,
FUN = sum)
colnames(grades) <- c("First Name", "Last Name", "Score")
results$Outcome <-
paste0(results$Strategy.1, "-", results$Strategy.2)
results$Outcome <-
ifelse(results$Outcome == "Collude-Defect",
"Defect-Collude",
results$Outcome)
out <- list(
type = "cournotGame",
payoff = payoffMatrix,
output = outputMatrix,
price = priceMatrix,
results = results[order(results$Last.Name.1,
results$First.Name.1), ],
grades = grades[order(grades$`Last Name`, grades$`First Name`),]
)
class(out) <- c('econGame', class(out))
out
devtools::document()
cournotGame(sheet = sheet) -> cournot.F2223.1
plot(cournot.F2223.1)
plot(cournot.F2223.1, round = 1)
plot(cournot.F2223.1, round = 2)
plot(cournot.F2223.1, round = 3)
cournotGame(sheet = '1C3xrzMozXyVggsjfHaRNXXcUaXx8_ku-6mzsvLnIFkI')
devtools::document()
runEquilibriumGameApp()
devtools::document()
runEquilibriumGameApp()
equilibriumGame(17di0Lx2UDlZmak46Suwb5WXHhrQo0_LOmekvOoCoaKw)
equilibriumGame('17di0Lx2UDlZmak46Suwb5WXHhrQo0_LOmekvOoCoaKw') -> r2
r2
plot(r2)
runEquilibriumGameApp()
devtools::document()
runEquilibriumGameApp()
googlesheets4::gs4_deauth()
runEquilibriumGameApp()
runEquilibriumGameApp()
plot(equilibriumGame('1Got8WDK1Bkaoknll4465JXqJovfR1192H3MJXOiPxjc'), round = 3)
devtools::document()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
gs4_deauth()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
devtools::document()
runPublicgoodGameApp()
googlesheets4::gs4_deauth()
runPublicgoodGameApp()
devtools::document()
sheet = '1OI_ZHmBBaInTesavZJfMlqNoWQk-R1Kn1DLhClsAhx0'
results <- read_sheet(sheet)
googlesheets4::gs4_deauth()
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
return = 1.2
endowment = 0
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
individualReallocaitons <-
ceiling(totalReallocations / nrow(results))
results$Reallocation <- individualReallocaitons
results$Score <- results$Reallocation - results$Contribution
blindedResults <-
data.frame(results[, -which(names(results) %in% c("First.Name", "Last.Name", "Timestamp"))])
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ", ")
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ".")
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
individualReallocaitons <-
ceiling(totalReallocations / nrow(results))
results$Reallocation <- individualReallocaitons
results$Score <- results$Reallocation - results$Contribution
blindedResults <-
data.frame(results[, -which(names(results) %in% c("First.Name", "Last.Name", "Timestamp"))])
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ".")
grades <-
with(results,
as.data.frame(
cbind(Last.Name, First.Name, Contribution, Reallocation, Score)
))
results   results <- read_sheet(sheet)
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
results
results[!duplicated(c(results$First.Name, results$Last.Name)),]
results[!duplicated(cbind(results$First.Name, results$Last.Name)),]
runPublicgoodGameApp()
devtools::document()
runPublicgoodGameApp()
devtools::document()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
gs4_deauth()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE', seed = 8675309)
devtools::document()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc')
gs4_deauth()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc')
View(bertrandGame())
View(bertrandGame
)
sheet = '1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc'
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students')
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'))
cournotGame('18UBNhy0-xqClXH8b4SQ-FZbgd7zJ4ofzS1oJfcTdia4', partners = 'students')
plot(cournotGame('18UBNhy0-xqClXH8b4SQ-FZbgd7zJ4ofzS1oJfcTdia4', partners = 'students'))
devtools::document()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
googlesheets4::gs4_deauth()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')$grades
data.frame(ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')$grades)
devtools::document()
entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk')
gs4_deauth()
entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk')
plot(entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk'))
runEntryGameApp()
devtools::document()
gs4_deauth()
entryGame('14bYgMsJ8JyyNdVDgCK5uIrAevKNoEIlrmjrSh_JMcxQ')
devtools::document()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
gs4_deauth()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
runLobbyGameApp()
devtools::document()
devtools::document()
gs4_deauth()
runBertrandGameApp()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students')
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 1)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
devtools::document()
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 1)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
lobbyGame('1nhixb2N4RG187tmA18_Mzj7dvGkdvNBlakOy61MLj3I')
devtools::document
devtools::document()
cournotGame('1xQG7kDjcYhtbn7y7nSu_67H03llRrEUzJjKfp4oNBXY')
gs4_deauth()
cournotGame('1xQG7kDjcYhtbn7y7nSu_67H03llRrEUzJjKfp4oNBXY')
devtools::document
devtools::document()
runEquilibriumGameApp()
googlesheets4::gs4_deauth()
runEquilibriumGameApp()
devtools::document()
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
googlesheets4::gs4_deauth()
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
facet_wrap(vars(Round))
annotate_figure(_,
top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
annotate_figure(_,
top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
annotate_figure(top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 1)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 2)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 3)
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
}
equilibrium <- nleqslv(c(1,1), market)
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
return(c(supply,demand))
}
equilibrium <- nleqslv(c(1,1), market)
P <- equilibrium$x[1]
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
return(c(supply,demand))
}
equilibrium <- nleqslv(c(1,1), market)
P <- equilibrium$x[1]
P
equilibrium
knitr::opts_chunk$set(echo = TRUE)
Q = 2*(.82744)^(3/4)*L(1/4)
1250*9.0642
1250*9.0642/12000
library(Rsolnp)
costfun <- function(x) 3000 * x[1] + 1200 * x[2]
productionfun <- function(x) 2 * x[1]^0.25 * x[2]^0.75
solnp(
pars = c(1,1),
fun = costfun,
ineqfun = productionfun,
ineqLB = 1,
ineqUB = Inf,
LB = c(0,0))
library(nleqslv)
market <- function(x) {
supply <- 0.12*x[1] - x[2]
demand <-1400 - x[1] - x[2]
return(c(supply,demand))}
equilibrium <- nleqslv(c(2,2), market)
p <- equilibrium$x[1]
p
1250*0.12
3000*x^4 / 9.064128 + 992.9254
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128 + 992.9254, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((12000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((12000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(3000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 2, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(3000*x^3 / 9.064128 + 992.9254/x, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
devtools::document()
runBertrandGameApp()
devtools::document()
runCournotGameApp()
runCournotGameApp()
googlesheets4::gs4_deauth()
runCournotGameApp()
cournotGame('1kO43k83S_4SmS5ArYbj0BEpesRmeGFj3PT2SgonR-YU', partners = 'student')
runPublicgoodGameApp()
shiny::runApp('inst/shiny-examples/entryGameApp')
.libPaths()
gs4_auth()
googlesheets::gs4_auth()
googlesheets4::gs4_auth()
list.files('.secrets/')
devtools::document()
equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
plot(equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc'))
library(shiny)
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
runEquilibriumGameApp()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp()
devtools::document()
View(ultimatumGame('1zoZhzqjUTuKG_WW8axCqyqlMhRq4dPIT0uqDC7HoQiw')$grades)
googlesheets4::gs4_deauth()
View(ultimatumGame('1zoZhzqjUTuKG_WW8axCqyqlMhRq4dPIT0uqDC7HoQiw')$grades)
