results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
return = 1.2
endowment = 0
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
individualReallocaitons <-
ceiling(totalReallocations / nrow(results))
results$Reallocation <- individualReallocaitons
results$Score <- results$Reallocation - results$Contribution
blindedResults <-
data.frame(results[, -which(names(results) %in% c("First.Name", "Last.Name", "Timestamp"))])
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ", ")
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ".")
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
N <- nrow(results)
totalContributions <- sum(results$Contribution)
totalReallocations <- totalContributions * return
individualReallocaitons <-
ceiling(totalReallocations / nrow(results))
results$Reallocation <- individualReallocaitons
results$Score <- results$Reallocation - results$Contribution
blindedResults <-
data.frame(results[, -which(names(results) %in% c("First.Name", "Last.Name", "Timestamp"))])
rownames(blindedResults) <-
paste(results$Last.Name, results$First.Name, sep = ".")
grades <-
with(results,
as.data.frame(
cbind(Last.Name, First.Name, Contribution, Reallocation, Score)
))
results   results <- read_sheet(sheet)
results <- read_sheet(sheet)
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results,
list(First.Name = "John",
Last.Name = "Doe"))
results$First.Name <-
str_to_title(results$First.Name)
results$Last.Name <-
str_to_title(results$Last.Name)
results
results[!duplicated(c(results$First.Name, results$Last.Name)),]
results[!duplicated(cbind(results$First.Name, results$Last.Name)),]
runPublicgoodGameApp()
devtools::document()
runPublicgoodGameApp()
devtools::document()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
gs4_deauth()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE', seed = 8675309)
devtools::document()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc')
gs4_deauth()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc')
View(bertrandGame())
View(bertrandGame
)
sheet = '1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc'
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students')
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'))
cournotGame('18UBNhy0-xqClXH8b4SQ-FZbgd7zJ4ofzS1oJfcTdia4', partners = 'students')
plot(cournotGame('18UBNhy0-xqClXH8b4SQ-FZbgd7zJ4ofzS1oJfcTdia4', partners = 'students'))
devtools::document()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
googlesheets4::gs4_deauth()
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')
ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')$grades
data.frame(ultimatumGame('18gxfTbPWSrA8vWnrU8GVia-IaE5FF4FXG31HV5fcu8g')$grades)
devtools::document()
entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk')
gs4_deauth()
entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk')
plot(entryGame('1aF8vLLSTnR722gpti2uqMkHDyUZfoA9Zw471g7Jknjk'))
runEntryGameApp()
devtools::document()
gs4_deauth()
entryGame('14bYgMsJ8JyyNdVDgCK5uIrAevKNoEIlrmjrSh_JMcxQ')
devtools::document()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
gs4_deauth()
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
lobbyGame('1gEAozNkkLrLr6LFxsFOtXrOXJgUGA8xhA8f3f2y26qE')
runLobbyGameApp()
devtools::document()
devtools::document()
gs4_deauth()
runBertrandGameApp()
bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students')
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 1)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
devtools::document()
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 1)
plot(bertrandGame('1CnWHnyzlLDlCFoWCHe8-kW522R3UE0flB5GtikU_uvc', partners = 'students'), round = 2)
lobbyGame('1nhixb2N4RG187tmA18_Mzj7dvGkdvNBlakOy61MLj3I')
devtools::document
devtools::document()
cournotGame('1xQG7kDjcYhtbn7y7nSu_67H03llRrEUzJjKfp4oNBXY')
gs4_deauth()
cournotGame('1xQG7kDjcYhtbn7y7nSu_67H03llRrEUzJjKfp4oNBXY')
devtools::document
devtools::document()
runEquilibriumGameApp()
googlesheets4::gs4_deauth()
runEquilibriumGameApp()
devtools::document()
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
googlesheets4::gs4_deauth()
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
facet_wrap(vars(Round))
annotate_figure(_,
top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
annotate_figure(_,
top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')) +
annotate_figure(top = "Round 1                    Round 2                 Round 3")
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
View(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU')$grades)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'))
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 1)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 2)
plot(entryGame('1_bXK_E1p1YhxS1ME22vAlEuqEO1YfnJZtKM_4WCI2BU'), round = 3)
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
}
equilibrium <- nleqslv(c(1,1), market)
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
return(c(supply,demand))
}
equilibrium <- nleqslv(c(1,1), market)
P <- equilibrium$x[1]
#B
supply = 0.12
demand = 1400
library(nleqslv)
market <- function(x){
supply <- 0.12*x[1] - x[2]
demand <- 1400*x[1] - x[2]
return(c(supply,demand))
}
equilibrium <- nleqslv(c(1,1), market)
P <- equilibrium$x[1]
P
equilibrium
knitr::opts_chunk$set(echo = TRUE)
Q = 2*(.82744)^(3/4)*L(1/4)
1250*9.0642
1250*9.0642/12000
library(Rsolnp)
costfun <- function(x) 3000 * x[1] + 1200 * x[2]
productionfun <- function(x) 2 * x[1]^0.25 * x[2]^0.75
solnp(
pars = c(1,1),
fun = costfun,
ineqfun = productionfun,
ineqLB = 1,
ineqUB = Inf,
LB = c(0,0))
library(nleqslv)
market <- function(x) {
supply <- 0.12*x[1] - x[2]
demand <-1400 - x[1] - x[2]
return(c(supply,demand))}
equilibrium <- nleqslv(c(2,2), market)
p <- equilibrium$x[1]
p
1250*0.12
3000*x^4 / 9.064128 + 992.9254
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128 + 992.9254, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((12000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((12000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128)/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(12000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(3000*x^3 / 9.064128 + 992.9254/x, from = 0, to = 1, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
#For MC Take the derivative of the cost function using
curve(12000*x^3 / 9.064128, from = 0, to = 2, xlab = 'quantity', ylab = 'cost', col = 'blue', ylim = c(0,2000))
#For AVC Take Derivative/x
curve((3000*x^3 / 9.064128), xlab = 'quantity', ylab = 'cost', col = 'red', add = TRUE)
#For ATC Take Derivative - Variable Costs
curve(3000*x^3 / 9.064128 + 992.9254/x, xlab = 'quantity', ylab = 'cost', col = 'purple', add = TRUE)
devtools::document()
runBertrandGameApp()
devtools::document()
runCournotGameApp()
runCournotGameApp()
googlesheets4::gs4_deauth()
runCournotGameApp()
cournotGame('1kO43k83S_4SmS5ArYbj0BEpesRmeGFj3PT2SgonR-YU', partners = 'student')
runPublicgoodGameApp()
shiny::runApp('inst/shiny-examples/entryGameApp')
.libPaths()
gs4_auth()
googlesheets::gs4_auth()
googlesheets4::gs4_auth()
list.files('.secrets/')
devtools::document()
equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
plot(equilibriumGame('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc'))
library(shiny)
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
runEquilibriumGameApp()
runEquilibriumGameApp('1yh3x7wAp88q57BElJwDX41fk2Jst8In9RFgWZJn-Inc')
devtools::document()
runEquilibriumGameApp()
devtools::document()
View(ultimatumGame('1zoZhzqjUTuKG_WW8axCqyqlMhRq4dPIT0uqDC7HoQiw')$grades)
googlesheets4::gs4_deauth()
View(ultimatumGame('1zoZhzqjUTuKG_WW8axCqyqlMhRq4dPIT0uqDC7HoQiw')$grades)
library(MicroWithR)
??MicroWithR
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
100 - 10*Pimax_custom[1][1]
100 - 10*Pimax_custom[[1]][1]
100 - 10*Pimax_standard[[1]][1]
50 - 0.1*Pimax_standard[[1]][1]
source("~/.active-rstudio-document", echo=TRUE)
100 - 10*Pimax_custom[[1]][1]
20 - 5*Pimax_custom[[1]][1]
200 - 5*Pimax_custom[[1]][1]
Pimax_custom[[1]]
Pimax_custom$values
Pimax_standard$values
c(10, 15) %*% Pimax_custom[[1]]
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_custom[[2]]
c(10, 15) %*% Pimax_standard[[1]]
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
source("~/.active-rstudio-document", echo=TRUE)
c(10, 15) %*% Pimax_custom[[1]]
c(10, 15) %*% Pimax_standard[[1]]
Pimax_custom$values
Pimax_standard$values
library(Rsolnp)
deg_c = 1
deg_s = 7/6
a_c = 1/3
a_s = 2/3
b1_c = 100000
b2_c = 5
b1_s = 15000
b2_s = 0.15
c_r = 10
c_l = 15
Q_c <- function(x) {
x[1]^a_c*x[2]^(deg_c - a_c)
}
D_c <- function(x) {
b1_c - b2_c*Q_c(x)
}
Pi_custom = function(x) {
-(D_c(x)*Q_c(x) - c_r*x[1] - c_l*x[2])
#  -100000*(x[1]^(1/3)*x[2]^(2/3)) + 5*x[1]^(2/3)*x[2]^(4/3) + 10*x[1] + 15*x[2]
}
Pimax_custom <- solnp(pars = c(1,1), fun = Pi_custom, LB = c(0,0), UB = c(Inf, Inf))
Pi_standard = function(x) {
-15000*(x[1]^(2/3)*x[2]^(1/2)) + 0.15*x[1]^(4/3)*x[2] + 10*x[1] + 15*x[2]
}
Pimax_custom
rm(Pimax_custom)
library(Rsolnp)
deg_c = 1
deg_s = 7/6
a_c = 1/3
a_s = 2/3
b1_c = 100000
b2_c = 5
b1_s = 15000
b2_s = 0.15
c_r = 10
c_l = 15
Q_c <- function(x) {
x[1]^a_c*x[2]^(deg_c - a_c)
}
D_c <- function(x) {
b1_c - b2_c*Q_c(x)
}
Pi_custom = function(x) {
-(D_c(x)*Q_c(x) - c_r*x[1] - c_l*x[2])
}
Pimax_custom <- solnp(pars = c(1,1), fun = Pi_custom, LB = c(0,0), UB = c(Inf, Inf))
Pimax_custom
source("C:/Users/bange/My Drive (bangjamest@sau.edu)/Teaching/IntroEconApplications/Project2Solutions.R", echo=TRUE)
Pimax_c
Pimax_s
LOAN <- 200000
SRmax_c <- solnp(
pars = c(1,1), fun = D_c(x)*Q_c(x),
ineqfun = c_r*x[1] + c_l*x[2], ineqLB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
LOAN <- 200000
TR_c <- D_c(x)*Q_c(x)
LOAN <- 200000
SRmax_c <- solnp(
pars = c(1,1), fun = function(x) {D_c(x)*Q_c(x)},
ineqfun = c_r*x[1] + c_l*x[2], ineqLB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
LOAN <- 200000
TR_c <- function(x) {
D_c(x)*Q_c(x)
}
SRmax_c <- solnp(
pars = c(1,1), fun = TR_c,
ineqfun = c_r*x[1] + c_l*x[2], ineqLB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
LOAN <- 200000
TR_c <- function(x) {
D_c(x)*Q_c(x)
}
COST <- function(x) {
c_r*x[1] + c_l*x[2]
}
SRmax_c <- solnp(
pars = c(1,1), fun = TR_c,
ineqfun = COST, ineqLB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
LOAN <- 200000
TR_c <- function(x) {
D_c(x)*Q_c(x)
}
COST <- function(x) {
c_r*x[1] + c_l*x[2]
}
SRmax_c <- solnp(
pars = c(1,1), fun = TR_c,
ineqfun = COST, ineqLB = 0, ineqUB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
SRmax_c
LOAN <- 200000
TR_c <- function(x) {
-D_c(x)*Q_c(x)
}
COST <- function(x) {
c_r*x[1] + c_l*x[2]
}
SRmax_c <- solnp(
pars = c(1,1), fun = TR_c,
ineqfun = COST, ineqLB = 0, ineqUB = LOAN,
LB = c(0,0), UB = c(Inf, Inf))
SRmax_c
source("C:/Users/bange/My Drive (bangjamest@sau.edu)/Teaching/IntroEconApplications/Project2Solutions.R", echo=TRUE)
SRmax_c
SRmax_s
D_c(SRmax_c$pars)
D_s(SRmax_s$pars)
SRmax_c
Q_c(SRmax_c$pars)
par(mfrow = c(1,2))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue')
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), col = 'red')
par(mfrow = c(1,2))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue', ylim = c(0,10000), xlim = c(0,10000))
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), col = 'red')
par(mfrow = c(1,2))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue', ylim = c(0,20000), xlim = c(0,20000))
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), xlab = "Humans", ylab = "Robots", col = 'red', ylim = c(0,20000), xlim = c(0,20000))
par(mfrow = c(1,2))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue', ylim = c(0,20000), xlim = c(0,20000), title = "Custom Output")
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), xlab = "Humans", ylab = "Robots", col = 'red', ylim = c(0,20000), xlim = c(0,20000), title = "Standard Output")
par(mfrow = c(1,2))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue', ylim = c(0,20000), xlim = c(0,20000), main = "Custom Output")
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), xlab = "Humans", ylab = "Robots", col = 'red', ylim = c(0,20000), xlim = c(0,20000), main = "Standard Output")
par(mfrow = c(1,1))
curve((Q_c(SRmax_c$pars)^3)/(x^2), xlab = "Humans", ylab = "Robots", col = 'blue', ylim = c(0,20000), xlim = c(0,20000), main = "Output")
curve((Q_s(SRmax_s$pars)^(3/2))/(x^(3/4)), col = 'red', add = TRUE)
getOption("digits")
cbind(ff <- format(1.2345 + 10^(0:5), width = 11, big.mark = "'"))
## all with same width (one more than the specified minimum)
r <- c("76491283764.97430", "29.12345678901", "-7.1234", "-100.1","1123")
## American:
prettyNum(r, big.mark = ",")
devtools::document()
runMarketGameApp()
devtools::document()
runMarketGameApp()
runMarketGameApp("lobbyGame")
devtools::document()
runMarketGameApp("lobbyGame")
runMarketGameApp("cournotGame")
runMarketGameApp("equilibriumGame")
