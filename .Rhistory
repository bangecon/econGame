Partner.Strategy == "Defect",
ifelse(Strategy == "Collude", qf.dc, qf.dd)
)
))
Profit <- ifelse(Strategy == "Collude",
ifelse(
is.na(Partner.Strategy),
profit(c(qi.c, 0)),
ifelse(
Partner.Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc))
)),
ifelse(
is.na(Partner.Strategy),
profit(c(ql.d, 0)),
ifelse(
Partner.Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd))
))
)
})
a = 10
b = -1
c = 6
f = 0
sheet = '1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'
results <- read_sheet(sheet)
if (a <= 0)
stop("The intercept of the demand function needs to be positive.")
if (b >= 0)
stop("Demand curves are downward-sloping!")
if (c <= 0)
stop("There ain't no such thing as a free lunch (TANSTAAFL)!")
if (f <  0)
stop("Fixed costs must be non-negative.")
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results, list(First.Name = "John", Last.Name = "Doe"))
results$First.Name <- str_to_title(results$First.Name)
results$Last.Name <- str_to_title(results$Last.Name)
results$Partner.First.Name <-
str_to_title(results$Partner.First.Name)
results$Partner.Last.Name <-
str_to_title(results$Partner.Last.Name)
partnerResults <-
results[, which(
names(results) %in% c(
"Partner.First.Name",
"Partner.Last.Name",
"Round",
"Strategy"
)
)]
colnames(partnerResults)[4] <- "Partner.Strategy"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name", "Last.Name", "Round"),
by.y = c("Partner.First.Name", "Partner.Last.Name", "Round"),
suffixes = c("", ".Partner")
)
q.monopoly = (a - c) / (-2 * b)
qi.c = q.monopoly / 2
ql.d = (a - c) / (-2 * b)
qf.dc = (a - c) / (-2 * b) - qi.c / 2 # if ql = ql.collude
qf.dd = (a - c) / (-2 * b) - ql.d / 2  # if ql = ql.defect
price <- function(x)
a + b * (x[1] + x[2])
p.cc <- price(c(qi.c, qi.c))
p.cd <- price(c(qi.c, qf.dc))
p.dc <- price(c(ql.d, qi.c))
p.dd <- price(c(ql.d, qf.dd))
profit <- function(x)
(price(x) - c) * x - f
leaderPayoffs <-
c(profit(c(qi.c, qi.c))[1],
profit(c(qi.c, qf.dc))[1],
profit(c(ql.d, qi.c))[1],
profit(c(ql.d, qf.dd))[1])
followerPayoffs <-
c(profit(c(qi.c, qi.c))[2],
profit(c(qi.c, qf.dc))[2],
profit(c(ql.d, qi.c))[2],
profit(c(ql.d, qf.dd))[2])
leaderResults <- subset(results, Role == "Leader")
followerResults <- subset(results, Role == "Follower")
leaderResults <- within(leaderResults, {
Q.Student <- ifelse(Strategy == "Collude", qi.c, ql.d)
Q.Partner <- ifelse(is.na(Partner.Strategy),
0,
ifelse(
Partner.Strategy == "Collude",
qi.c,
ifelse(Strategy == "Collude", qf.dc, qf.dd)
))
Profit <- ifelse(
Strategy == "Collude",
ifelse(
is.na(Partner.Strategy),
profit(c(qi.c, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc)))
),
ifelse(
is.na(Partner.Strategy),
profit(c(ql.d, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
)
})
if (nrow(followerResults) > 0) {
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude",
qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- ifelse(
Partner.Strategy == "Collude",
ifelse(
Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc)),
ifelse(Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
)
})
}
if (nrow(followerResults) > 0) {
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude",
qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Price <- price(c(Q.Student, Q.Partner))
Profit <- ifelse(
Partner.Strategy == "Collude",
ifelse(Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc))),
ifelse(Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
})
}
results <- rbind(leaderResults, followerResults)
grades <-
aggregate(Profit ~ First.Name + Last.Name,
data = results,
FUN = sum)
tree <-
gameTree(
players = c("Leader", "Follower"),
payoffs1 = leaderPayoffs,
payoffs2 = followerPayoffs
)
colnames(grades) <- c("Last Name", "First Name", "Score")
out <- list(
type = "stackelbergGame",
payoff = cbind(leaderPayoffs, followerPayoffs),
tree = tree,
results = results[order(results$Round,
results$Last.Name,
results$First.Name), -which(names(results) %in% 'Timestamp')],
grades = grades[order(grades$`Last Name`, grades$`First Name`), ]
)
class(out) <- c('econGame', class(out))
out
leaderResults
followerResults
# Set up the Google Sheets, read responses, and initialize output objects.
results <- read_sheet(sheet)
if (a <= 0)
stop("The intercept of the demand function needs to be positive.")
if (b >= 0)
stop("Demand curves are downward-sloping!")
if (c <= 0)
stop("There ain't no such thing as a free lunch (TANSTAAFL)!")
if (f <  0)
stop("Fixed costs must be non-negative.")
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results, list(First.Name = "John", Last.Name = "Doe"))
results$First.Name <- str_to_title(results$First.Name)
results$Last.Name <- str_to_title(results$Last.Name)
results$Partner.First.Name <-
str_to_title(results$Partner.First.Name)
results$Partner.Last.Name <-
str_to_title(results$Partner.Last.Name)
partnerResults <-
results[, which(
names(results) %in% c(
"Partner.First.Name",
"Partner.Last.Name",
"Round",
"Strategy"
)
)]
colnames(partnerResults)[4] <- "Partner.Strategy"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name", "Last.Name", "Round"),
by.y = c("Partner.First.Name", "Partner.Last.Name", "Round"),
suffixes = c("", ".Partner")
)
q.monopoly = (a - c) / (-2 * b)
qi.c = q.monopoly / 2
ql.d = (a - c) / (-2 * b)
qf.dc = (a - c) / (-2 * b) - qi.c / 2 # if ql = ql.collude
qf.dd = (a - c) / (-2 * b) - ql.d / 2  # if ql = ql.defect
price <- function(x)
a + b * (x[1] + x[2])
p.cc <- price(c(qi.c, qi.c))
p.cd <- price(c(qi.c, qf.dc))
p.dc <- price(c(ql.d, qi.c))
p.dd <- price(c(ql.d, qf.dd))
profit <- function(x)
(price(x) - c) * x - f
leaderPayoffs <-
c(profit(c(qi.c, qi.c))[1],
profit(c(qi.c, qf.dc))[1],
profit(c(ql.d, qi.c))[1],
profit(c(ql.d, qf.dd))[1])
followerPayoffs <-
c(profit(c(qi.c, qi.c))[2],
profit(c(qi.c, qf.dc))[2],
profit(c(ql.d, qi.c))[2],
profit(c(ql.d, qf.dd))[2])
leaderResults <- subset(results, Role == "Leader")
followerResults <- subset(results, Role == "Follower")
leaderResults <- within(leaderResults, {
Q.Student <- ifelse(Strategy == "Collude", qi.c, ql.d)
Q.Partner <- ifelse(is.na(Partner.Strategy),
0,
ifelse(
Partner.Strategy == "Collude",
qi.c,
ifelse(Strategy == "Collude", qf.dc, qf.dd)
))
Profit <- ifelse(
Strategy == "Collude",
ifelse(
is.na(Partner.Strategy),
profit(c(qi.c, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc)))
),
ifelse(
is.na(Partner.Strategy),
profit(c(ql.d, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
)
})
if (nrow(followerResults) > 0) {
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude",
qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Profit <- ifelse(
Partner.Strategy == "Collude",
ifelse(Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc))),
ifelse(Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
})
}
results <- rbind(leaderResults, followerResults)
grades <-
aggregate(Profit ~ First.Name + Last.Name,
data = results,
FUN = sum)
tree <-
gameTree(
players = c("Leader", "Follower"),
payoffs1 = leaderPayoffs,
payoffs2 = followerPayoffs
)
source("G:/My Drive/Teaching/PrinciplesOfMicro(Spring2022)/Activities/econGame/R/gameTree.R", echo=TRUE)
tree <-
gameTree(
players = c("Leader", "Follower"),
payoffs1 = leaderPayoffs,
payoffs2 = followerPayoffs
)
colnames(grades) <- c("Last Name", "First Name", "Score")
out <- list(
type = "stackelbergGame",
payoff = cbind(leaderPayoffs, followerPayoffs),
tree = tree,
results = results[order(results$Round,
results$Last.Name,
results$First.Name), -which(names(results) %in% 'Timestamp')],
grades = grades[order(grades$`Last Name`, grades$`First Name`), ]
)
class(out) <- c('econGame', class(out))
out
out$tree +
geom_text
out$tree +
geom_text(aes(x = 0.5, y = 0.5), data = "Collude")
geom_text(aes(x = 0.5, y = 0.5), "Collude")
geom_text(aes(x = 0.5, y = 0.5, "Collude"))
out$tree +
geom_text(aes(x = 0.5, y = 0.5, "Collude"))
out$tree +
geom_text(x = 0.5, y = 0.5, "Collude")
out$tree
out$tree +
geom_text(x = 0.5, y = 0.5, label = "Collude")
geom_text(x = c(0.5, 0.5), y = c(0.5, -0.5), label = "Collude")
out$tree +
geom_text(x = c(0.5, 0.5), y = c(0.5, -0.5), label = c("Collude", "Defect"))
source("G:/My Drive/Teaching/PrinciplesOfMicro(Spring2022)/Activities/econGame/R/gameTree.R", echo=TRUE)
gameTree()
source("G:/My Drive/Teaching/PrinciplesOfMicro(Spring2022)/Activities/econGame/R/plot_econGame.R", echo=TRUE)
source("G:/My Drive/Teaching/PrinciplesOfMicro(Spring2022)/Activities/econGame/R/gameTree.R", echo=TRUE)
source("G:/My Drive/Teaching/PrinciplesOfMicro(Spring2022)/Activities/econGame/R/stackelbergGame.R", echo=TRUE)
results <- read_sheet(sheet)
if (a <= 0)
stop("The intercept of the demand function needs to be positive.")
if (b >= 0)
stop("Demand curves are downward-sloping!")
if (c <= 0)
stop("There ain't no such thing as a free lunch (TANSTAAFL)!")
if (f <  0)
stop("Fixed costs must be non-negative.")
colnames(results) <- make.names(colnames(results))
results <-
replace_na(results, list(First.Name = "John", Last.Name = "Doe"))
results$First.Name <- str_to_title(results$First.Name)
results$Last.Name <- str_to_title(results$Last.Name)
results$Partner.First.Name <-
str_to_title(results$Partner.First.Name)
results$Partner.Last.Name <-
str_to_title(results$Partner.Last.Name)
partnerResults <-
results[, which(
names(results) %in% c(
"Partner.First.Name",
"Partner.Last.Name",
"Round",
"Strategy"
)
)]
colnames(partnerResults)[4] <- "Partner.Strategy"
results <- merge(
results,
partnerResults,
all = TRUE,
by.x = c("First.Name", "Last.Name", "Round"),
by.y = c("Partner.First.Name", "Partner.Last.Name", "Round"),
suffixes = c("", ".Partner")
)
q.monopoly = (a - c) / (-2 * b)
qi.c = q.monopoly / 2
ql.d = (a - c) / (-2 * b)
qf.dc = (a - c) / (-2 * b) - qi.c / 2 # if ql = ql.collude
qf.dd = (a - c) / (-2 * b) - ql.d / 2  # if ql = ql.defect
price <- function(x)
a + b * (x[1] + x[2])
p.cc <- price(c(qi.c, qi.c))
p.cd <- price(c(qi.c, qf.dc))
p.dc <- price(c(ql.d, qi.c))
p.dd <- price(c(ql.d, qf.dd))
profit <- function(x)
(price(x) - c) * x - f
leaderPayoffs <-
c(profit(c(qi.c, qi.c))[1],
profit(c(qi.c, qf.dc))[1],
profit(c(ql.d, qi.c))[1],
profit(c(ql.d, qf.dd))[1])
followerPayoffs <-
c(profit(c(qi.c, qi.c))[2],
profit(c(qi.c, qf.dc))[2],
profit(c(ql.d, qi.c))[2],
profit(c(ql.d, qf.dd))[2])
leaderResults <- subset(results, Role == "Leader")
followerResults <- subset(results, Role == "Follower")
leaderResults <- within(leaderResults, {
Q.Student <- ifelse(Strategy == "Collude", qi.c, ql.d)
Q.Partner <- ifelse(is.na(Partner.Strategy),
0,
ifelse(
Partner.Strategy == "Collude",
qi.c,
ifelse(Strategy == "Collude", qf.dc, qf.dd)
))
Profit <- ifelse(
Strategy == "Collude",
ifelse(
is.na(Partner.Strategy),
profit(c(qi.c, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc)))
),
ifelse(
is.na(Partner.Strategy),
profit(c(ql.d, 0)),
ifelse(Partner.Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
)
})
if (nrow(followerResults) > 0) {
followerResults <- within(followerResults, {
Q.Partner <- ifelse(Partner.Strategy == "Collude", qi.c, ql.d)
Q.Student <- ifelse(Strategy == "Collude",
qi.c,
ifelse(Partner.Strategy == "Collude", qf.dc, qf.dd))
Profit <- ifelse(
Partner.Strategy == "Collude",
ifelse(Strategy == "Collude",
profit(c(qi.c, qi.c)),
profit(c(qi.c, qf.dc))),
ifelse(Strategy == "Collude",
profit(c(ql.d, qi.c)),
profit(c(ql.d, qf.dd)))
)
})
}
results <- rbind(leaderResults, followerResults)
View(results)
outcomes <- paste0(leaderResults$Strategy, "-", leaderResults$Partner.Strategy)
grades <-
aggregate(Profit ~ First.Name + Last.Name,
data = results,
FUN = sum)
tree <-
gameTree(
players = c("Leader", "Follower"),
payoffs1 = leaderPayoffs,
payoffs2 = followerPayoffs
)
colnames(grades) <- c("Last Name", "First Name", "Score")
out <- list(
type = "stackelbergGame",
payoff = cbind(leaderPayoffs, followerPayoffs),
tree = tree,
leaderResults,
followerResults,
outcomes = outcomes,
results = results[order(results$Round,
results$Last.Name,
results$First.Name), -which(names(results) %in% 'Timestamp')],
grades = grades[order(grades$`Last Name`, grades$`First Name`), ]
)
class(out) <- c('econGame', class(out))
out
library(shiny)
devtools::document()
sheet
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
devtools::document()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
runStackelbergGameApp()
devtools::document()
runStackelbergGameApp()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
results <- read_sheet('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
subset(results, Role == "Leader")
devtools::document()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
devtools::document()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
runStackelbergGameApp()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')$outcomes
devtools::document()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')$outcomes
plot(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'))
class(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')$outcomes)
devtools::document()
plot(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'))
plot(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'))
devtools::document()
plot(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'))
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')$outcomes
devtools::document()
plot(stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI'))
runStackelbergGameApp()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
devtools::document()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
runStackelbergGameApp()
stackelbergGame('1nZFzrvIwqdl0cXpBDZojAeJ1DgGDhSQ_kvyT8dW2zLI')
runStackelbergGameApp()
devtools::document()
install.packages("rticles")
unlink("docs/marketGame_cache", recursive = TRUE)
